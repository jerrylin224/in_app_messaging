c
params[:box]
params
c
params
@conversations.where(id: [60, 61])
@conversations.where(id: 60).first
@conversations.where(id: 60)
@conversations.first
params
@conversations
@conversations.trash(current_user)
c
params[:id]
c
params[:id]
params
c
^\\\\
c
@conversations.trash(current_user)
current_user.mailbox.trash
current_user.mailbox.trash.count
current_user.mailbox.trash
current_user.mailbox
@conversations.trash
@conversations
c
@conversation.is_unread?(current_user)
@conversation.is_read?(current_user)
@conversation
c
params[:box]
params
params[:action]
params[:action] == 'unread' 
c
(params[:action] == 'unread' && @conversations.count.nonzero?) ? 'unread' : ''
( params[:action] == 'unread' && @conversations.count.nonzero?)
if params[:action] == 'unread' && @conversations.count.nonzero?)
if params[:action] == 'unread' && @conversations.count.nonzero?) ? 'unread' : ''
if params[:action] == 'unread' && @conversations.count.nonzero? ) ? 'unread' : ''
params[:action] == 'unread' && @conversations.count.nonzero? 
params
c
paramsc
params[:box] == "unread"
params
c
@conversations.first.c
@conversations.first
@conversations
c
@conversation.is_read?(current_user)
@conversation.is_read?
@conversation.is_read
@conversation
Mailboxer::Receipt.conversation(@conversation).recipient(current_user)
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).count
Mailboxer::Receipt.conversation(@conversation).recipient(current_user)
Mailboxer::Receipt.conversation(@conversation)
Mailboxer::Receipt.where(conversation_id: @conversation.id)
Mailboxer::Receipt.where(conversation: @conversation)
Mailboxer::Receipt.conversation(@conversation).first.sender_type
Mailboxer::Receipt.conversation(@conversation).first.sender
Mailboxer::Receipt.conversation(@conversation).first
Mailboxer::Receipt.conversation(@conversation).where.first
Mailboxer::Receipt.conversation(@conversation).count
Mailboxer::Receipt.conversation(@conversation)
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).first.is_read
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).first
Mailboxer::Receipt.conversation(@conversation).recipient(current_user)
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).is_true?
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).first.is_true
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).first
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).is_true
Mailboxer::Receipt.conversation(@conversation).recipient(current_user)
Mailboxer::Receipt.conversation(@conversation).recipient(current_user).count
Mailboxer::Receipt.conversation(@conversation).recipient(current_user)
@conversation.receipts.first.is_read
@conversation.receipts.first
@conversation.receipts.count.first
@conversation.receipts.count
@conversation.receipts
@conversation.recipts
@conversation.recipt
@conversation
c
Gallery.new(gallery_params)
gallery_params
c
gallery_params
params
rails generate uploader Image
c
registration_params
current_user
c
params.require(:user).permit!
params.require(:user)
params[:user]
params
c
bundc
c
params[:user][:avatar]
params[:user][:name]
params[:user]
params
c
params
c
User.last.avatar.thumb.url
User.last.avatar.thumb
User.last.avatar
User.last
current_user.avatar.thumb.url
current_user.avatar.thumb
current_user.avatar.thumb.url
c
@q
c
@q
c
@q.is_a?(Array)
@q[0]
@q[1]
@q
c
@conversations.last.id
@conversations.last
conversation.last
conversation
c
@conversations.last.participants.last.name
@conversations.last.participants.last
@conversations.last.participants
@conversations.last.participanys
@conversations.last
@conversations
c
@conversations.inbox(current_user).participant(current_user).merge(Mailboxer::Receipt.is_read)
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true).inbox(current_user)@conversations.inbox(current_user).participant(current_user).merge(Mailboxer::Receipt.is_read)
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true).inbox(current_user)
c
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true).inbox(current_user)c
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true).inbox(current_user).count
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true).inbox(current_user)
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true).inbox
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true).count
Mailboxer::Conversation.ransack(params[:q]).result(distinct: true)
Mailboxer::Conversation.ransack(params[:q])
.ransack(params[:q])
Mailboxer::Conversation.ransack(params[:q])
current_user.mailbox.ransack(params[:q])
current_user.mailbox
current_user
User.ransack(params[:q])
User
c
conversation.participants.last.name
conversation.participants.last
conversation.participants
participant.name
participant
c
params[:receipients]
c
User.where(id: ["2","3"]).count
User.where(id: ["2","3"])
User.where(id: ["2","3")
User
User.all.pluck(:id)
params[:receipients]
params
c
recipients
n
params['recipients']
params[:receipients]
params
c
params[:recipients]
params
c
message.sender.name
message.sender
current_user.name
c
message.sender.name
message.sender
message
c
n
message
current_user
@conversation.receipts_for
@conversation
message
c
current_admin_user
c
current_user
c
C
c
params[:to]
params
c
params
c
current_user.mailbox.inbox.participant(current_user).merge(Mailboxer::Receipt.is_read).count
current_user.mailbox.inbox.read(current_user).count
reload
current_user.mailbox.inbox.read(current_user).count
current_user.mailbox.inbox.participant(current_user).merge(Mailboxer::Receipt.is_read).count
current_user.mailbox.inbox.participant(current_user).merge(Mailboxer::Receipt.is_unread).count
current_user.mailbox.inbox.unread(current_user).count
current_user.mailbox.inbox.participant(current_user).merge(Mailboxer::Receipt.is_read).count
current_user.mailbox.inbox(read:true).count
current_user.mailbox.inbox.read(current_user).count
current_user.mailbox.inbox.unread(current_user).count
current_user.mailbox.inbox.count
current_user.mailbox.inbox.unread(current_user).count
current_user.mailbox.inbox.unread.count
current_user.mailbox.inbox.participant(current_user).merge(Mailboxer::Receipt.is_unread).count
current_user.mailbox.inbox.participant(current_user).merge(Mailboxer::Receipt.is_read)
current_user.mailbox.inbox.participant(current_user).merge(Mailboxer::Recepipt.is_read).count
current_user.mailbox.receipts.each {|r| puts r.conversation.id´};1cc
current_user.mailbox.receipts.each {|r| puts r.conversation.id´};1
current_user.mailbox.receipts.each {conversation.id
current_user.mailbox.receipts.pluck :conversation_id
current_user.mailbox.receipts.is_read.count
current_user.mailbox.receipts.is_unread.count
current_user.mailbox.receipts.count
current_user.mailbox.inbox.each {|i| puts i.inspect};1
current_user.mailbox.inbox.unread.count
current_user.mailbox.conversations(mailbox_type: 'inbox', read: false).count
current_user.mailbox.conversations(mailbox_type: 'inbox', unread: false).count
current_user.mailbox.conversations(mailbox_type: 'inbox', unread: true).count
current_user.mailbox.conversations(mailbox_type: 'inbox', read: true).count
current_user.mailbox.conversations(mailbox_type: 'inbox').count
current_user.mailbox.conversations.count
current_user.mailbox.inbox.count
current_user.mailbox.unread.count
current_user.mailbox.is_unread?(current_user) 
current_user.mailbox
current_user.mailbox.is_read
current_user.mailbox.is_unread
current_user.mailbox.unread
current_user.mailbox.inbox(is_read: false).count
current_user.mailbox.inbox(is_read: true).count
current_user.mailbox.inbox(read: true).to_sql
current_user.mailbox.inbox(read: false).to_sql
current_user.mailbox.inbox.first(5).each {|i| puts i.inspect};1
current_user.mailbox.inbox.first(5).each {|i| puts i};1
